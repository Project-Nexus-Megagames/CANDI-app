[{"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\index.js":"1","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\App.js":"2","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\reportWebVitals.js":"3","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\store.js":"4","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\initUpdate.js":"5","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\socket.js":"6","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\configureStore.js":"7","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\characters.js":"8","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\gamestate.js":"9","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\assets.js":"10","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\playerActions.js":"11","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\config.js":"12","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\reducer.js":"13","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\api.js":"14","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\middleware\\toast.js":"15","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\middleware\\api.js":"16","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\auth.js":"17","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\Actions.jsx":"18","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\homepage.jsx":"19","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Control\\ControlTerminal.jsx":"20","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\navigationBar.jsx":"21","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\notFound.jsx":"22","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\Login.jsx":"23","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Control\\control.jsx":"24","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\MyCharacters\\myCharacter.jsx":"25","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\OtherCharacters.jsx":"26","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\NewAction.jsx":"27","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\ActionList.jsx":"28","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\SelectedAction.jsx":"29","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\SelectedProject.jsx":"30","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\loading.jsx":"31","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\ModifyCharacter.jsx":"32","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\AddAsset.jsx":"33","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\ModifyMemory.jsx":"34"},{"size":714,"mtime":1616535871101,"results":"35","hashOfConfig":"36"},{"size":4109,"mtime":1617098053638,"results":"37","hashOfConfig":"36"},{"size":375,"mtime":1616535871108,"results":"38","hashOfConfig":"36"},{"size":151,"mtime":1616535871107,"results":"39","hashOfConfig":"36"},{"size":3758,"mtime":1617098053638,"results":"40","hashOfConfig":"36"},{"size":150,"mtime":1616535871109,"results":"41","hashOfConfig":"36"},{"size":509,"mtime":1616535871102,"results":"42","hashOfConfig":"36"},{"size":2611,"mtime":1617084760247,"results":"43","hashOfConfig":"36"},{"size":2037,"mtime":1616535871104,"results":"44","hashOfConfig":"36"},{"size":2765,"mtime":1617085006486,"results":"45","hashOfConfig":"36"},{"size":4150,"mtime":1616535871105,"results":"46","hashOfConfig":"36"},{"size":204,"mtime":1616535871100,"results":"47","hashOfConfig":"36"},{"size":474,"mtime":1616535871107,"results":"48","hashOfConfig":"36"},{"size":238,"mtime":1616535871102,"results":"49","hashOfConfig":"36"},{"size":183,"mtime":1616535871106,"results":"50","hashOfConfig":"36"},{"size":1018,"mtime":1616535871106,"results":"51","hashOfConfig":"36"},{"size":2683,"mtime":1616535871103,"results":"52","hashOfConfig":"36"},{"size":4101,"mtime":1616537769600,"results":"53","hashOfConfig":"36"},{"size":2490,"mtime":1616996800088,"results":"54","hashOfConfig":"36"},{"size":12946,"mtime":1617098053638,"results":"55","hashOfConfig":"36"},{"size":3334,"mtime":1616996800090,"results":"56","hashOfConfig":"36"},{"size":1976,"mtime":1616996800091,"results":"57","hashOfConfig":"36"},{"size":3070,"mtime":1616996800088,"results":"58","hashOfConfig":"36"},{"size":5556,"mtime":1616536636984,"results":"59","hashOfConfig":"36"},{"size":13946,"mtime":1617098053638,"results":"60","hashOfConfig":"36"},{"size":11255,"mtime":1616537518430,"results":"61","hashOfConfig":"36"},{"size":4788,"mtime":1617098053638,"results":"62","hashOfConfig":"36"},{"size":2803,"mtime":1616536710598,"results":"63","hashOfConfig":"36"},{"size":12320,"mtime":1617098053638,"results":"64","hashOfConfig":"36"},{"size":5757,"mtime":1617098053638,"results":"65","hashOfConfig":"36"},{"size":13610,"mtime":1616996800089,"results":"66","hashOfConfig":"36"},{"size":5368,"mtime":1617098053649,"results":"67","hashOfConfig":"36"},{"size":3350,"mtime":1616536710598,"results":"68","hashOfConfig":"36"},{"size":5788,"mtime":1616536710598,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1k1l37l",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\index.js",[],["145","146"],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\App.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\reportWebVitals.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\store.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\initUpdate.js",["147"],"import { assetAdded, assetDeleted, assetUpdated } from './entities/assets';\r\nimport { characterAdded, characterDeleted, characterUpdated } from './entities/characters';\r\nimport { gamestateReceived } from './entities/gamestate';\r\nimport { playerActionsReceived, playerActionUpdated, actionAdded, actionDeleted } from './entities/playerActions';\r\nimport socket from '../socket'\r\nimport store from './store';\r\n\r\nconst initUpdates = () => {\r\n    socket.on('connect', () => { console.log('UwU I made it') });\r\n    socket.on('updateClients', (data) => { \r\n        console.log('updateClients');\r\n        for (const el of data) {\r\n            switch(el.model) {\r\n                case 'Character':\r\n                    store.dispatch(characterUpdated(el));\r\n                    break;\r\n                case 'Action':\r\n                    store.dispatch(playerActionUpdated(el));\r\n                    break;\r\n                case 'Gamestate':\r\n                    store.dispatch(gamestateReceived(el));\r\n                    break;\r\n                case 'Asset':\r\n                    store.dispatch(assetUpdated(el));\r\n                    break;\r\n                default:\r\n                    console.log(`Unable to update Redux for ${el.model}: ${el._id}`);\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n\r\n    socket.on('createClients', (data) => { \r\n        console.log('createClients');\r\n        for (const el of data) {\r\n            switch(el.model) {\r\n                case 'Character':\r\n                    store.dispatch(characterAdded(el));\r\n                    break;\r\n                case 'Action':\r\n                    store.dispatch(actionAdded(el));\r\n                    break;\r\n                case 'Gamestate':\r\n                    console.log('DEAR GOD IF YOU SEE THIS FUCKING CALL SCOTT OH GOD HOW COULD THIS HAPPEN')\r\n                    break;\r\n                case 'Asset':\r\n                    store.dispatch(assetAdded(el));\r\n                    break;\r\n                default:\r\n                    console.log(`Unable to add Redux for ${el.model}: ${el._id}`);\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n\r\n    socket.on('deleteClients', (data) => { \r\n        console.log('deleteClients');\r\n        for (const el of data) {\r\n            switch(el.model) {\r\n                case 'Character':\r\n                    store.dispatch(characterDeleted(el));\r\n                    break;\r\n                case 'Action':\r\n                    store.dispatch(actionDeleted(el));\r\n                    break;\r\n                case 'Gamestate':\r\n                    console.log('DEAR GOD IF YOU SEE THIS FUCKING CALL SCOTT OH GOD HOW COULD THIS HAPPEN')\r\n                    break;\r\n                case 'Asset':\r\n                    store.dispatch(assetDeleted(el));\r\n                    break;\r\n                default:\r\n                    console.log(`Unable to add Redux for ${el.model}: ${el._id}`);\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n\r\n/*\tsocket.on('updateCharacters', (data) => { store.dispatch(charactersReceived(data)) });\r\n\tsocket.on('updateCharacter', (data) => { store.dispatch(characterUpdated(data)) });\r\n\r\n\r\n    socket.on('updateActions', (data) => { store.dispatch(playerActionsReceived(data)) });\r\n    socket.on('updateAction', (data) => { store.dispatch(playerActionUpdated(data)) });\r\n    socket.on('actionCreated', (data) => { store.dispatch(actionAdded(data)) });\r\n    socket.on('actionDeleted', (data) => { store.dispatch(actionDeleted(data)) });\r\n    \r\n    socket.on('updateGamestate', (data) => { store.dispatch(gamestateReceived(data)) });\r\n    socket.on('updateAssets', (data) => { store.dispatch(assetsReceived(data)) });\r\n    */\r\n}\r\n\r\n\r\n\r\nexport default initUpdates;","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\socket.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\configureStore.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\characters.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\gamestate.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\assets.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\playerActions.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\config.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\reducer.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\api.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\middleware\\toast.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\middleware\\api.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\redux\\entities\\auth.js",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\Actions.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\homepage.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Control\\ControlTerminal.jsx",["148","149"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { Alert, ButtonGroup, Content, InputNumber, InputPicker, Divider, Placeholder, Panel, Button, Icon, Modal, Form, FormGroup, FormControl, ControlLabel, FlexboxGrid, SelectPicker, TagPicker, DatePicker, Loader } from 'rsuite';\r\nimport { gameServer } from '../../config';\r\nimport { connect } from 'react-redux';\r\nimport socket from '../../socket';\r\nimport { getMyCharacter } from '../../redux/entities/characters';\r\n\r\nclass ControlTerminal extends Component {\r\n\tstate = { \r\n\t\tgsModal: false,\r\n\t\twarningModal: false,\r\n\t\twarning2Modal: false,\r\n\t\tassModal: false,\r\n\t\tprojectModal: false,\r\n\t\tformValue: {\r\n\t\t\tround: null,\r\n\t\t\tstatus: '',\r\n\t\t},\r\n\t\tendTime: null,\r\n\t\tprojName: '',\r\n\t\tprojDescription: '',\r\n\t\tprogress: 0,\r\n\t\tplayers: [],\r\n\t\timage: '',\r\n\r\n\t\tcharacters: [],\r\n\t\r\n\t\tdrafts: 0,\r\n\t\tawaiting: 0,\r\n\t\tready: 0,\r\n\t\tassets: [],\r\n\t\tselected: null,\r\n\t\tname: '',\r\n\t\tdescription: '',\r\n\t\tuses: 0, \r\n\t\tloading: false\r\n\t }\r\n\r\n\tcomponentDidMount = async () => {\r\n\t\tconst formValue = {\r\n\t\t\tround: this.props.gamestate.round, \r\n\t\t\tstatus: this.props.gamestate.status,\r\n\t\t\tendTime: this.props.gamestate.endTime\r\n\t\t}\r\n\r\n\t\tlet drafts = 0;\r\n\t\tlet awaiting= 0;\r\n\t\tlet ready = 0;\r\n\t\tfor (const action of this.props.actions) {\r\n\t\t\tif (action.status.draft === true) drafts++;\r\n\t\t\telse if (action.status.ready === true) ready++;\r\n\t\t\telse if (action.status.draft === false && action.status.ready === false && action.status.published === false) awaiting++;\r\n\t\t}\r\n\t\tthis.setState({ formValue, drafts, awaiting, ready, characters: {...this.props.characters} })\r\n\t}\r\n\r\n\tcomponentDidUpdate = async (prevProps) => {\r\n\t\tif (this.props.gamestate !== prevProps.gamestate || this.props.actions !== prevProps.actions) {\r\n\t\t\tconst formValue = {\r\n\t\t\t\tround: this.props.gamestate.round, \r\n\t\t\t\tstatus: this.props.gamestate.status\r\n\t\t\t}\r\n\t\t\tlet drafts = 0;\r\n\t\t\tlet awaiting= 0;\r\n\t\t\tlet ready = 0;\r\n\t\t\tfor (const action of this.props.actions) {\r\n\t\t\t\tif (action.status.draft === true && action.model !== \"Project\") drafts++;\r\n\t\t\t\telse if (action.status.ready === true) ready++;\r\n\t\t\t\telse if (action.status.draft === false && action.status.ready === false && action.status.published === false) awaiting++;\r\n\t\t\t}\r\n\t\t\tthis.setState({ formValue, drafts, awaiting, ready, endTime: this.props.gamestate.endTime })\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\trender() { \r\n\t\tif (!this.props.login) {\r\n\t\t\tthis.props.history.push('/');\r\n\t\t\treturn (<Loader inverse center content=\"doot...\" />)\r\n\t\t};\r\n\t\treturn ( \r\n\t\t\t<Content style={{style1}}>\r\n\t\t\t\t<Divider>Actions Status</Divider>\r\n\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t<Panel bordered style={{backgroundColor: '#272b34'}} header='Drafts'> {this.state.drafts} </Panel>\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t<Panel bordered style={{backgroundColor: '#272b34'}} header='Awaiting Resolution'> {this.state.awaiting} </Panel>\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t<Panel bordered style={{backgroundColor: '#272b34'}} header='Ready for Publishing'> {this.state.ready} </Panel>\t\t\t\r\n\t\t\t\t\t</FlexboxGrid.Item>\t\t\t\t\t\r\n\t\t\t\t</FlexboxGrid>\r\n\r\n\t\t\t\t<Divider>Round Editing</Divider>\r\n\t\t\t\t<Panel>\r\n\t\t\t\t\t<ButtonGroup >\r\n\t\t\t\t\t\t<Button appearance=\"ghost\" onClick={() => this.setState({ warningModal: true })}>Close Actions</Button>\r\n\t\t\t\t\t\t<Button appearance=\"ghost\" onClick={() => this.setState({ warning2Modal: true })}>Publish Resolutions</Button>\r\n\t\t\t\t\t\t<Button appearance=\"ghost\" disabled={this.isControl()} onClick={() => this.setState({ gsModal: true })} >Edit Game State</Button>\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Panel>\r\n\t\t\t\t<Divider>Asset Management</Divider>\r\n\t\t\t\t<Panel>\r\n\t\t\t\t\t<ButtonGroup >\r\n\t\t\t\t\t\t<Button color='red' appearance=\"ghost\" onClick={() => this.setState({ assModal: true })}>Edit or Delete Asset/Trait</Button>\r\n\t\t\t\t\t\t<Button color='orange' appearance=\"ghost\" onClick={() => this.setState({ projectModal: true })}>New Project</Button>\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t</Panel>\r\n\t\t\t\t<Divider>Scott's Message of the Day:</Divider>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5>This update: All actions now operate on sockets.</h5>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Modal size='sm' show={this.state.gsModal} onHide={() => this.setState({ gsModal: false })} > \r\n\t\t\t\t\t<Form formValue={this.state.formValue} layout=\"center\" onChange={formValue => {this.setState({ formValue });}}>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<ControlLabel>Game State </ControlLabel>\r\n\t\t\t\t\t\t\t<FormControl name=\"status\" data={pickerData} accepter={InputPicker} />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<ControlLabel>Round</ControlLabel>\r\n\t\t\t\t\t\t\t<FormControl name=\"round\" cleanable={false} accepter={InputNumber} />\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<ControlLabel>End Time</ControlLabel>\r\n\t\t\t\t\t\t\t<DatePicker value={this.state.endTime} onChange={this.handleDate} format=\"YYYY-MM-DD HH:mm\"></DatePicker>\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t\t<Modal.Footer>\r\n        \t  <Button loading={this.state.loading} onClick={() => this.handleSubmit()} disabled={(this.state.formValue.status === null)} appearance=\"primary\">\r\n        \t    Submit\r\n        \t  </Button>\r\n        \t  <Button onClick={() => this.setState({ gsModal: false })} appearance=\"subtle\">\r\n        \t    Cancel\r\n         \t </Button>\r\n        </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\r\n\t\t\t\t<Modal backdrop='static' size='md' show={this.state.projectModal} onHide={() => this.setState({ projectModal: false })}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tName\t\t\r\n\t\t\t\t</p> \r\n\t\t\t\t\t<textarea value={this.state.projName} style={textStyle} onChange={(event)=> this.setState({ projName: event.target.value })}></textarea>\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDescription\t\t\r\n\t\t\t\t</p> \r\n\t\t\t\t<textarea rows='4' value={this.state.projDescription} style={textStyle} onChange={(event)=> this.setState({projDescription: event.target.value})}></textarea>\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\tImage\r\n\t\t\t\t</p>\r\n\t\t\t\t<textarea value={this.state.image} style={textStyle} onChange={(event)=> this.setState({ image: event.target.value })}></textarea>\t\r\n\t\t\t\t<p>\r\n\t\t\t\t\tProgress\r\n\t\t\t\t</p>\r\n\t\t\t\t<InputNumber value={this.state.progress} onChange={(event)=> this.setState({progress: event})}></InputNumber>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPlayers\r\n\t\t\t\t</p>\r\n\t\t\t\t\t<TagPicker data={this.props.characters} labelKey='characterName' valueKey='characterName' block onChange={(event)=> this.setState({ players: event })}></TagPicker>\r\n\t\t\t\t\t<Modal.Footer>\r\n        \t  <Button onClick={() => this.newProject()} appearance=\"primary\">\r\n        \t    Submit\r\n        \t  </Button>\r\n        \t  <Button onClick={() => this.setState({ projectModal: false })} appearance=\"subtle\">\r\n        \t    Cancel\r\n         \t </Button>\r\n        </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\r\n\t\t\t\t<Modal backdrop=\"static\" size='sm' show={this.state.warningModal} onHide={() => this.setState({ warningModal: false })}>\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t\t\t{'  '}\r\n\t\t\t\t\t\t\tWaring! Are you sure you want to close the round? This will lock down all actions.\r\n\t\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t<Modal.Footer>\r\n            <Button onClick={() => this.closeDraft()} appearance=\"primary\">\r\n              I am Sure!\r\n            </Button>\r\n            <Button onClick={() => this.setState({ warningModal: false })} appearance=\"subtle\">\r\n              Nevermind\r\n            </Button>\r\n          </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t\r\n\t\t\t\t<Modal backdrop=\"static\" size='sm' show={this.state.warning2Modal} onHide={() => this.setState({ warning2Modal: false })}>\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t\t\t{'  '}\r\n\t\t\t\t\t\t\tWaring! Are you sure you want to publish all actions? This will:\r\n\t\t\t\t\t\t\t<Icon icon=\"remind\" style={{ color: '#ffb300', fontSize: 24 }}/>\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\tMake all actions that are \"Ready for Publishing\" to \"Published\"\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\tRecall all Lent Assets to their owners\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\tPush the round to it's next number\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t<Modal.Footer>\r\n            <Button onClick={() => this.publishActions()} appearance=\"primary\">\r\n              I am Sure!\r\n            </Button>\r\n            <Button onClick={() => this.setState({ warning2Modal: false })} appearance=\"subtle\">\r\n              Nevermind\r\n            </Button>\r\n          </Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t\r\n\t\t\t\t<Modal size='sm' show={this.state.assModal} onHide={() => this.setState({ assModal: false })}>\r\n\t\t\t\t\t<SelectPicker block placeholder=\"Edit or Delete Asset/Trait\" onChange={(event) => this.handleChage(event)} data={this.props.assets.filter(el => el.model !== 'Wealth')} valueKey='_id' labelKey='name'></SelectPicker>\r\n\t\t\t\t\t\t{this.renderAss()}\r\n\t\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t\t{this.state.selected && \r\n\t\t\t\t\t\t\t<ButtonGroup>\r\n\t\t\t\t\t\t\t\t<Button loading={this.state.loading}  onClick={() => this.assetModify()} color=\"blue\">Edit</Button>\r\n\t\t\t\t\t\t\t\t<Button loading={this.state.loading}  onClick={() => this.handleDelete()} color=\"red\">Delete</Button>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</ButtonGroup>}\r\n\t\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</Modal>\r\n\t\t\t</Content>\r\n\t\t );\r\n\t}\r\n\r\n\thandleDate = (value) => {\r\n\t\tthis.setState({ endTime: value })\r\n\t}\r\n\r\n\thandleChage = (event) => {\r\n\t\tif (event) {\r\n\t\t\tconst selected = this.props.assets.find(el => el._id === event);\r\n\t\t\tthis.setState({ selected: event, name: selected.name, description: selected.description, uses: selected.uses })\t\t\t\r\n\t\t}\r\n\t\telse this.setState({ selected: '', name: '', description: '', uses: 0 })\t\t\t\r\n\t}\r\n\r\n\tassetModify = async () => {\r\n\t\tthis.setState({ loading: true });\r\n\t\tconst data = {\r\n\t\t\tid: this.state.selected,\r\n\t\t\tname: this.state.name,\r\n\t\t\tdescription: this.state.description,\r\n\t\t\tuses: this.state.uses\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/assets/modify`, { data });\r\n\t\t\tAlert.success('Asset Modification Submitted');\r\n\t\t\tthis.setState({ assModal: false, selected: null });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      Alert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\r\n\t\tthis.setState({ loading: false });\r\n\t}\r\n\r\n\trenderAss = () => {\r\n\t\tif (this.state.selected) {\r\n\t\t\treturn (\r\n\t\t\t\t<Panel>\r\n\t\t\t\t\tName:\r\n\t\t\t\t\t<textarea value={this.state.name} style={textStyle} onChange={(event)=> this.setState({ name: event.target.value })}></textarea>\t\r\n\t\t\t\t\tDescription:\r\n\t\t\t\t\t<textarea rows='4' value={this.state.description} style={textStyle} onChange={(event)=> this.setState({description: event.target.value})}></textarea>\t\r\n\t\t\t\t\tUses: <InputNumber value={this.state.uses} onChange={(event)=> this.setState({uses: event})}></InputNumber>\r\n\t\t\t\t</Panel>\t\t\t\r\n\t\t\t)\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<Placeholder.Paragraph rows={5} >Awaiting Selection</Placeholder.Paragraph>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\thandleDelete = async () => {\r\n\t\ttry{\r\n\t\t\tawait axios.delete(`${gameServer}api/assets/${this.state.selected}`);\r\n\t\t\tAlert.success('Asset Successfully Deleted');\r\n\t\t\tthis.setState({ assModal: false, selected: null });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      Alert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\r\n\t}\r\n\r\n\thandleSubmit = async () => {\r\n\t\ttry{\r\n\t\t\tconst data = {\r\n\t\t\t\tround: this.state.formValue.round,\r\n\t\t\t\tstatus: this.state.formValue.status,\r\n\t\t\t\tendTime: this.state.endTime\r\n\t\t\t}\r\n\t\t\tawait axios.patch(`${gameServer}api/gamestate/modify`, { data });\r\n\t\t\tAlert.success('Gamestate Modify Submitted');\r\n\t\t\tthis.setState({ gsModal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\r\n\t}\r\n\r\n\tcloseDraft = async () => {\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/gamestate/closeRound`);\r\n\t\t\tAlert.success('The Game is now in Resolution Phase');\r\n\t\t\tthis.setState({ warningModal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tpublishActions = async () => {\r\n\t\ttry{\r\n\t\t\tawait axios.patch(`${gameServer}api/gamestate/nextRound`);\r\n\t\t\tAlert.success('Actions Have been Published!');\r\n\t\t\tthis.setState({ warning2Modal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tnewProject = async () => {\r\n\t\tconst data = {\r\n\t\t\tdescription: this.state.projName,\r\n\t\t\tintent: this.state.projDescription,\r\n\t\t\teffort: 0,\r\n\t\t\tprogress: this.state.progress,\r\n\t\t\tmodel: \"Project\",\r\n\t\t\tplayers: this.state.players,\r\n\t\t\tcreator: this.props.playerCharacter,\r\n\t\t\tround: this.props.gamestate.round, \r\n\t\t\timage: this.state.image\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tawait axios.post(`${gameServer}api/actions/project`, { data: data });\r\n\t\t\tAlert.success('Project Created');\r\n\t\t\tthis.setState({ projectModal: false });\r\n\t\t}\r\n\t\tcatch (err) {\r\n      \t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tisControl () {\r\n\t\tif (this.props.user.roles.some(el => el === \"Control\")) return false;\r\n\t\telse return true;\r\n\t}\r\n\r\n\tfilterAssets () {\r\n\t\tconst filtered = this.props.assets.filter(el => el.modal !== 'Wealth')\r\n\t}\r\n\t\r\n}\r\n \r\nconst style1 = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n};\r\n\r\nconst pickerData = [\r\n\t{\r\n\t\tlabel: 'Active',\r\n\t\tvalue: 'Active'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Resolution',\r\n\t\tvalue: 'Resolution'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Down',\r\n\t\tvalue: 'Down'\r\n\t},\r\n]\r\n\r\nconst textStyle = {\r\n\tbackgroundColor: '#1a1d24', \r\n\tborder: '1.5px solid #3c3f43', \r\n\tborderRadius: '5px', \r\n\twidth: '100%',\r\n\tpadding: '5px',\r\n\toverflow: 'auto', \r\n\tscrollbarWidth: 'none',\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tassets: state.assets.list,\r\n\tlogin: state.auth.login,\r\n\tgamestate: state.gamestate,\r\n\tcharacters: state.characters.list,\r\n\tactions: state.actions.list,\r\n\tplayerCharacter: state.auth.user ? getMyCharacter(state) : undefined\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlTerminal);\r\n","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\navigationBar.jsx",["150"],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\notFound.jsx",["151"],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\Login.jsx",["152","153"],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Control\\control.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\MyCharacters\\myCharacter.jsx",["154","155","156"],"import axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  FlexboxGrid,\r\n  Loader,\r\n  Panel,\r\n  IconButton,\r\n  Icon,\r\n  Form,\r\n  FormGroup,\r\n  Button,\r\n  ButtonToolbar,\r\n  FormControl,\r\n  ControlLabel,\r\n  Divider,\r\n  Content,\r\n  Affix,\r\n  Tag,\r\n  Modal,\r\n  Drawer,\r\n  SelectPicker,\r\n  Placeholder,\r\n  Alert,\r\n  Grid,\r\n  Col,\r\n  Row,\r\n} from \"rsuite\";\r\nimport { gameServer } from \"../../config\";\r\nimport { getMyCharacter } from \"../../redux/entities/characters\";\r\nimport { assetLent, assetUpdated } from \"../../redux/entities/assets\";\r\nimport socket from \"../../socket\";\r\n\r\nclass MyCharacter extends Component {\r\n  state = {\r\n    formValue: {\r\n      textarea: \"\",\r\n    },\r\n    memory: \"\",\r\n    show: false,\r\n    lending: null,\r\n    target: null,\r\n    characters: null,\r\n    lendShow: false,\r\n    unlend: false, // boolean for displaying the \"unlend\" modal\r\n    unleanding: null, // what is being \"Unlent\"\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const char = this.props.myCharacter;\r\n    // console.log(this.props.character)\r\n    if (char !== undefined) {\r\n      const formValue = {\r\n        textarea: char.standingOrders,\r\n      };\r\n      const characters = { ...this.props.characters };\r\n      this.setState({ formValue, characters });\r\n    }\r\n  };\r\n\r\n  /*componentDidUpdate = (prevProps) => {\r\n\t if (this.props.playerCharacter !== prevProps.playerCharacter) {\r\n\t\t const char = this.props.playerCharacter;\r\n\t\t const formValue = {\r\n\t\t\ttextarea: char.standingOrders,\r\n\t\t}\r\n\t this.setState({ formValue });\t\t\r\n\t }\r\n\t}*/\r\n\r\n  openAnvil(url) {\r\n    const win = window.open(url, \"_blank\");\r\n    win.focus();\r\n  }\r\n\r\n  showMemory = (memory) => {\r\n    this.setState({ memory, show: true });\r\n  };\r\n\r\n  openLend = (lending) => {\r\n    this.setState({ lending, lendShow: true });\r\n  };\r\n\r\n  closeLend = () => {\r\n    this.setState({ lendShow: false });\r\n  };\r\n\r\n  openUnlend = (unleanding) => {\r\n    this.setState({ unleanding, unlend: true });\r\n  };\r\n\r\n  render() {\r\n    const playerCharacter = this.props.myCharacter;\r\n    if (!this.props.login) {\r\n      this.props.history.push(\"/\");\r\n      return <Loader inverse center content=\"doot...\" />;\r\n    }\r\n    return (\r\n      <Content style={{ overflow: \"auto\", height: \"calc(100vh - 100px)\" }}>\r\n        <Grid fluid>\r\n          <Row>\r\n            <Col xs={24} sm={24} md={8} className=\"gridbox\">\r\n              <div>\r\n                <p>\r\n                  <b>{playerCharacter.characterName}</b> {playerCharacter.tag}\r\n                </p>\r\n                <p>\r\n                  <b>\r\n                    World Anvil Link{\" \"}\r\n                    <IconButton\r\n                      onClick={() => this.openAnvil(playerCharacter.worldAnvil)}\r\n                      icon={<Icon icon=\"link\" />}\r\n                      appearance=\"primary\"\r\n                    />\r\n                  </b>\r\n                </p>\r\n                <p>\r\n                  <b>Bio:</b> {playerCharacter.bio}\r\n                </p>\r\n                <p>\r\n                  <img\r\n                    class=\"portrait\"\r\n                    src={`/images/${playerCharacter.characterName}.jpg`}\r\n                    alt=\"Unable to load img\"\r\n                    width=\"95%\"\r\n                    height=\"320\"\r\n                  />\r\n                </p>\r\n              </div>\r\n            </Col>\r\n            <Col xs={24} sm={24} md={8} className=\"gridbox\">\r\n              <Divider style={{ marginTop: \"5px\", marginBottom: \"0px\" }}>\r\n                Traits\r\n              </Divider>\r\n              {playerCharacter.traits.map((trait, index) => (\r\n                <div key={index} style={{ paddingTop: \"10px\" }}>\r\n                  {trait.uses > 0 && (\r\n                    <React.Fragment>\r\n                      <Panel\r\n                        style={{ backgroundColor: \"#1a1d24\" }}\r\n                        shaded\r\n                        header={trait.name}\r\n                        bordered\r\n                        collapsible\r\n                      >\r\n                        <p>{trait.description}</p>\r\n\r\n                        {trait.uses !== 999 && <p>Uses: {trait.uses}</p>}\r\n                      </Panel>\r\n                    </React.Fragment>\r\n                  )}\r\n                </div>\r\n              ))}\r\n              <Divider style={{ marginTop: \"15px\", marginBottom: \"0px\" }}>\r\n                Assets\r\n              </Divider>\r\n              {playerCharacter.assets.map((asset, index) => (\r\n                <div key={index} style={{ paddingTop: \"10px\" }}>\r\n                  {asset.uses > 0 && (\r\n                    <React.Fragment>\r\n                      <Affix>\r\n                        {asset.status.lent && this.rednerHolder(asset)}\r\n                        {!asset.status.lent && <Tag color=\"green\">Ready</Tag>}\r\n                      </Affix>\r\n                      <Panel\r\n                        style={{ backgroundColor: \"#1a1d24\" }}\r\n                        shaded\r\n                        header={asset.name}\r\n                        bordered\r\n                        collapsible\r\n                      >\r\n                        <FlexboxGrid>\r\n                          <FlexboxGrid.Item colspan={20}>\r\n                            <p>{asset.description}</p>\r\n                          </FlexboxGrid.Item>\r\n                          <FlexboxGrid.Item\r\n                            style={{ textAlign: \"center\" }}\r\n                            colspan={4}\r\n                          >\r\n                            {!asset.status.lent && (\r\n                              <Button\r\n                                onClick={() => this.openLend(asset)}\r\n                                appearance=\"ghost\"\r\n                                size=\"sm\"\r\n                              >\r\n                                Lend\r\n                              </Button>\r\n                            )}\r\n                            {asset.status.lent && (\r\n                              <Button\r\n                                onClick={() => this.openUnlend(asset)}\r\n                                appearance=\"ghost\"\r\n                                size=\"sm\"\r\n                              >\r\n                                Un-Lend\r\n                              </Button>\r\n                            )}\r\n                          </FlexboxGrid.Item>\r\n                        </FlexboxGrid>\r\n                        {asset.uses !== 999 && <p>Uses: {asset.uses}</p>}\r\n                      </Panel>\r\n                    </React.Fragment>\r\n                  )}\r\n                </div>\r\n              ))}\r\n              <Divider style={{ width: \"95%\" }}>Wealth</Divider>\r\n              <Panel\r\n                style={{\r\n                  backgroundColor: \"#bfb606\",\r\n                  textAlign: \"center\",\r\n                  width: \"95%\",\r\n                }}\r\n                shaded\r\n                bordered\r\n              >\r\n                <h4 style={{ color: \"black\" }}>\r\n                  {playerCharacter.wealth.description}\r\n                </h4>\r\n                <b style={{ color: \"black\" }}>\r\n                  Uses: {playerCharacter.wealth.uses}\r\n                </b>\r\n\r\n                {playerCharacter.wealth.status.lent && (\r\n                  <b style={{ color: \"black\", fontSize: \"1.35em\" }}>\r\n                    Wealth lent to: '{playerCharacter.wealth.currentHolder}'\r\n                  </b>\r\n                )}\r\n                <div>\r\n                  {!playerCharacter.wealth.status.lent && (\r\n                    <Button\r\n                      onClick={() => this.openLend(playerCharacter.wealth)}\r\n                      color=\"blue\"\r\n                      size=\"sm\"\r\n                    >\r\n                      Lend\r\n                    </Button>\r\n                  )}\r\n                  {playerCharacter.wealth.status.lent && (\r\n                    <Button\r\n                      onClick={() => this.openUnlend(playerCharacter.wealth)}\r\n                      color=\"blue\"\r\n                      size=\"sm\"\r\n                    >\r\n                      Un-Lend\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </Panel>\r\n              <Divider style={{ marginTop: \"15px\", marginBottom: \"0px\" }}>\r\n                Borrowed Assets\r\n              </Divider>\r\n              {playerCharacter.lentAssets.map((borrowed, index) => (\r\n                <div key={index} style={{ paddingTop: \"10px\" }}>\r\n                  <Affix>\r\n                    {borrowed.status.lent && this.findOwner(borrowed._id)}\r\n                  </Affix>\r\n                  <Panel shaded header={borrowed.name} bordered collapsible>\r\n                    <p>{borrowed.description}</p>\r\n                  </Panel>\r\n                </div>\r\n              ))}\r\n            </Col>\r\n            <Col xs={24} sm={24} md={8} className=\"gridbox\">\r\n              <Panel header=\"Standing Orders\" bordered style={{ width: \"95%\" }}>\r\n                <Form\r\n                  fluid\r\n                  formValue={this.state.formValue}\r\n                  onChange={(value) => this.setState({ formValue: value })}\r\n                >\r\n                  <FormGroup>\r\n                    <ControlLabel></ControlLabel>\r\n                    <FormControl\r\n                      name=\"textarea\"\r\n                      componentClass=\"textarea\"\r\n                      placeholder=\"Orders for if you miss a turn...\"\r\n                    />\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <ButtonToolbar>\r\n                      <Button\r\n                        appearance=\"primary\"\r\n                        onClick={() => this.handleStanding()}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </ButtonToolbar>\r\n                  </FormGroup>\r\n                </Form>\r\n              </Panel>\r\n            </Col>\r\n          </Row>\r\n        </Grid>\r\n      </Content>\r\n    );\r\n  }\r\n\r\n  rednerHolder = (asset) => {\r\n    const holder = this.props.characters.find((el) =>\r\n      el.lentAssets.some((el2) => el2._id === asset._id)\r\n    );\r\n    return <Tag color=\"violet\">Lent to: {holder.characterName}</Tag>;\r\n  };\r\n\r\n  findOwner = (id) => {\r\n    for (const character of this.props.characters) {\r\n      if (\r\n        character.assets.some((el) => el._id === id) ||\r\n        character.traits.some((el) => el._id === id)\r\n      ) {\r\n        return <Tag color=\"blue\">Borrowed from: {character.characterName}</Tag>;\r\n      }\r\n    }\r\n    return <Tag color=\"blue\">Borrowed from: ???</Tag>;\r\n  };\r\n\r\n  renderLendation = () => {\r\n    if (this.state.target === null || this.state.target === undefined) {\r\n      return (\r\n        <Placeholder.Paragraph rows={15}>\r\n          Awaiting Selection\r\n        </Placeholder.Paragraph>\r\n      );\r\n    } else {\r\n      const target = this.props.characters.find(\r\n        (el) => el._id === this.state.target\r\n      );\r\n      return (\r\n        <div>\r\n          <Divider\r\n            style={{ textAlign: \"center\", fontWeight: \"bolder\", fontSize: 20 }}\r\n          >\r\n            {target.characterName}, {target.tag}\r\n          </Divider>\r\n          <p>{target.bio}</p>\r\n          <Divider></Divider>\r\n          <p style={{ fontWeight: \"bolder\", fontSize: 20 }}>\r\n            Are you sure you want to lend your '{this.state.lending.name}' to\r\n            this person?{\" \"}\r\n          </p>\r\n          <Button\r\n            onClick={() => this.handleSubmit()}\r\n            disabled={\r\n              this.state.target === null || this.state.target === undefined\r\n            }\r\n            appearance=\"primary\"\r\n          >\r\n            Lend\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  renderUnLendation = () => {\r\n    if (this.state.unleanding === null) {\r\n      return (\r\n        <Placeholder.Paragraph rows={15}>\r\n          Awaiting Selection\r\n        </Placeholder.Paragraph>\r\n      );\r\n    } else {\r\n      return (\r\n        <p>\r\n          Are you sure you want to take back your {this.state.unleanding.name}{\" \"}\r\n          from {this.state.unleanding.currentHolder}?\r\n        </p>\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSubmit = async () => {\r\n    const data = {\r\n      id: this.state.lending._id,\r\n      target: this.state.target,\r\n      lendingBoolean: true,\r\n    };\r\n    \r\n    socket.emit('characterRequest', 'lend', { data }); // new Socket event\r\n    this.setState({ lending: null, target: null });\r\n    this.closeLend();\r\n  };\r\n\r\n  handleTakeback = async () => {\r\n    const holder = this.props.characters.find((el) =>\r\n      el.lentAssets.some((el2) => el2._id === this.state.unleanding._id)\r\n    );\r\n\r\n    const data = {\r\n      id: this.state.unleanding._id,\r\n      target: holder._id,\r\n      lendingBoolean: false,\r\n    };\r\n    socket.emit('characterRequest', 'lend', { data }); // new Socket event\r\n  };\r\n\r\n  handleStanding = async () => {\r\n    const char = this.props.character;\r\n    const data = {\r\n      characterName: char.characterName,\r\n      email: char.email,\r\n      worldAnvil: char.worldAnvil,\r\n      tag: char.tag,\r\n      timeZone: char.timeZone,\r\n      playerName: char.playerName,\r\n      bio: char.bio,\r\n      uses: this.props.character.wealth.uses,\r\n      wealth: this.props.character.wealth.description,\r\n      icon: char.icon,\r\n      popSupport: char.popSupport,\r\n      standing: this.state.formValue.textarea,\r\n      id: char._id\r\n  }\r\n    socket.emit('characterRequest', 'modify', { data }); // new Socket event\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  login: state.auth.login,\r\n  user: state.auth.user,\r\n  assets: state.assets.list,\r\n  characters: state.characters.list,\r\n  myCharacter: state.auth.user ? getMyCharacter(state) : undefined,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateAsset: (data) => dispatch(assetUpdated(data)),\r\n  lendAsset: (data) => dispatch(assetLent(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyCharacter);\r\n","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\OtherCharacters.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\NewAction.jsx",["157","158"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Modal, Button, Slider, Alert, InputPicker, FlexboxGrid, InputNumber, Loader } from 'rsuite';\r\nimport { gameServer } from '../../config';\r\nimport { getMyCharacter, characterUpdated } from '../../redux/entities/characters';\r\nimport { actionAdded } from '../../redux/entities/playerActions';\r\nimport socket from '../../socket';\r\nclass NewAction extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        effort: 0,\r\n\t\t\t\tasset1: null,\r\n\t\t\t\tasset2: null,\r\n\t\t\t\tasset3: null,\r\n\t\t\t\tid: '',\r\n        description: '',\r\n\t\t\t\tintent: '',\t\r\n\t\t\t\tloading: false\t\r\n\t\t};\r\n\t}\r\n\t\r\n\thandleSubmit = async () => {\r\n\t\tthis.setState({ loading: true });\r\n\t\t// 1) make a new action\r\n\t\tconst action = {\r\n\t\t\teffort: this.state.effort,\r\n\t\t\tasset1: this.state.asset1,\r\n\t\t\tasset2: this.state.asset2,\r\n\t\t\tasset3: this.state.asset3,\r\n\t\t\tdescription: this.state.description,\r\n\t\t\tintent: this.state.intent,\r\n\t\t\tcreator: this.props.myCharacter._id,\r\n\t\t\tround: this.props.gamestate.round\r\n\t\t}\r\n\t\ttry{\r\n\t\t\t// const {data} = await axios.post(`${gameServer}api/actions`, { data: action });\r\n\t\t\t// console.log(data)\r\n\t\t\t// this.props.actionAdded(data);\r\n\t\t\t// Alert.success('Action Creation Submitted');\r\n\t\t\tsocket.emit('createActionRequest', action); // new Socket event\r\n\t\t\t\r\n\t\t\t// Locally update redux so that it reflects the effort being drained\r\n\t\t\tconst modifiedChar = {...this.props.myCharacter};\r\n\t\t\tmodifiedChar.effort -= this.state.effort;\r\n\t\t\tthis.props.updateCharacter(modifiedChar);\r\n\r\n\t\t\tthis.setState({effort: 0, asset1: '', asset2: '', asset3: '', description: '', intent: '', loading: false})\r\n\t\t\tthis.props.closeNew()\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tAlert.error(`Error: ${err.response.data ? err.response.data : err.response}`, 5000);\r\n\t\t\tthis.setState({ loading: false });\r\n\t\t}\r\n\t}\r\n\t\r\n\trender() { \r\n\t\treturn ( \r\n\t\t\t<Modal overflow\r\n\t\t\tfull\r\n\t\t\tsize='lg'  \r\n\t\t\tshow={this.props.show} \r\n\t\t\tonHide={() => this.props.closeNew()}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>Submit a new action</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t{this.state.loading && <Loader backdrop content=\"loading...\" vertical />}\r\n\t\t\t\t\t<form>\r\n\t\t\t\t\t\t<FlexboxGrid> Description\r\n\t\t\t\t\t\t\t<textarea rows='6' value={this.state.description} style={textStyle} onChange={(event)=> this.setState({description: event.target.value})}></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t<FlexboxGrid> What you would like to happen\r\n\t\t\t\t\t\t\t<textarea rows='6' value={this.state.intent} style={textStyle} onChange={(event)=> this.setState({intent: event.target.value})} ></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} align=\"middle\" colspan={6}>Effort\r\n\t\t\t\t\t\t\t\t<Slider graduated\r\n\t\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\t\tmax={this.props.myCharacter.effort}\r\n\t\t\t\t\t\t\t\tdefaultValue={0}\r\n\t\t\t\t\t\t\t\tprogress\r\n\t\t\t\t\t\t\t\tvalue={this.state.effort}\r\n\t\t\t\t\t\t\t\tonChange={(event)=> this.setState({effort: event})}>\r\n\t\t\t\t\t\t\t\t</Slider>\r\n\t\t\t\t\t\t\t\t<div style={{ paddingTop: '20px', fontSize: '2em', }} >\r\n\t\t\t\t\t\t\t\t\tCurrent Effort Left: {this.props.myCharacter.effort}\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} colspan={2}>\r\n\t\t\t\t\t\t\t\t<InputNumber value={this.state.effort} max={this.props.myCharacter.effort} min={0} onChange={(event)=> this.setState({effort: event})}></InputNumber>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={4}>\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '5px', paddingLeft: '10px', textAlign: 'left'}}  colspan={10}> Assets/Traits\r\n\t\t\t\t\t\t\t\t<InputPicker placeholder=\"Slot 1\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset1: event})}/>\r\n\t\t\t\t\t\t\t\t<InputPicker placeholder=\"Slot 2\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset2: event})}/>\r\n\t\t\t\t\t\t\t\t<InputPicker placeholder=\"Slot 3\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset3: event})}/>\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n          <Button onClick={() => this.handleSubmit()} loading={this.state.loading} disabled={this.isDisabled()} appearance=\"primary\">\r\n            Submit\r\n          </Button>\r\n          <Button onClick={() => this.props.closeNew()} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t );\r\n\t}\r\n\r\n\tisDisabled () {\r\n\t\t if (this.state.description.length > 10 && this.state.intent.length > 10 && this.state.effort > 0) return false;\r\n\t\t else return true;\r\n\t}\r\n\r\n}\r\n\r\nconst textStyle = {\r\n\tbackgroundColor: '#1a1d24', \r\n\tborder: '1.5px solid #3c3f43', \r\n\tborderRadius: '5px', \r\n\twidth: '100%',\r\n\tpadding: '5px',\r\n\toverflow: 'auto', \r\n\tscrollbarWidth: 'none',\r\n}\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tgamestate: state.gamestate,\r\n\tactions: state.actions.list,\r\n  myCharacter: state.auth.user ? getMyCharacter(state): undefined\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tactionAdded: (data) => dispatch(actionAdded(data)),\r\n\tupdateCharacter: (data) => dispatch(characterUpdated(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewAction);\r\n","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\ActionList.jsx",["159"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {List, FlexboxGrid, Container, } from 'rsuite';\r\nimport { getMyCharacter } from '../../redux/entities/characters';\r\nimport { filteredActions, getMyActions } from '../../redux/entities/playerActions';\r\n\r\nclass ActionList extends Component {\r\n\tstate = { \r\n\t\trounds: []\r\n\t }\r\n\r\n\t componentDidMount = async () => {\r\n\t\t try {\r\n\t\t\tthis.createListCatagories();\r\n\t\t }\r\n\t\t catch (err) {\r\n\t\t\t console.log(err);\r\n\t\t }\r\n\t\t}\r\n\r\n\t\tcomponentDidUpdate = (prevProps) => {\r\n\t\t\tif (this.props.filteredActions !== prevProps.filteredActions) {\r\n\t\t\t\tthis.createListCatagories();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tlistStyle (item) {\r\n\t\tif (item.model === \"Project\") {\r\n\t\t\treturn ({cursor: 'pointer', backgroundColor: \"#274472\", textAlign: \"center\", flexDirection: 'column', alignItems: 'center'})\r\n\t\t}\r\n\t\telse if (item === this.props.selected) {\r\n\t\t\treturn ({cursor: 'pointer', backgroundColor: \"#212429\"})\r\n\t\t}\r\n\t\telse return({cursor: 'pointer'});\r\n\t}\r\n\r\n\tcreateListCatagories = () => {\r\n\t\tconst rounds = [];\r\n\t\tfor (const action of this.props.filteredActions) {\r\n\t\t\tif (!rounds.some(el => el === action.round)) rounds.push(action.round);\r\n\t\t}\r\n\t\trounds.reverse();\r\n\t\tthis.setState({ rounds });\r\n\t}\r\n\r\n\trender() { \r\n\t\treturn ( \r\n\t\t\t<Container>\r\n\t\t\t\t{this.state.rounds.map((round, index) => (\r\n\t\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t<h6 style={{backgroundColor: \"#61342e\"}}>Round {round}</h6>\t\r\n\t\t\t\t\t<List key={index} hover size=\"sm\" >\r\n\t\t\t\t\t\t{this.props.filteredActions.filter(el => el.round === round).map((action, index) => (\r\n\t\t\t\t\t\t\t<List.Item key={index} index={index} size={'sm'} onClick={()=>this.props.handleSelect(action)} style={this.listStyle(action)}>\r\n\t\t\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={24} style={{...styleCenter, flexDirection: 'column', alignItems: 'flex-start', overflow: 'hidden'}}>\r\n\t\t\t\t\t\t\t\t\t\t<div style={titleStyle}>{action.description}</div>\r\n\t\t\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</List>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t</React.Fragment>\r\n\r\n\t\t\t\t))}\t\t\r\n\t\t\t</Container>\r\n\t\t );\r\n\t}\r\n}\r\n \r\nconst styleCenter = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  height: '60px'\r\n};\r\nconst titleStyle = {\r\n\tpaddingBottom: 5,\r\n\tpaddingLeft: 5,\r\n  whiteSpace: 'nowrap',\r\n  fontWeight: 500\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tgamestate: state.gamestate,\r\n\tmyCharacter: state.auth.user ? getMyCharacter(state): undefined,\r\n\tfilteredActions: filteredActions(state)//state.auth.control ? filteredActions(state) : \tgetMyActions(state) \r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // handleLogin: (data) => dispatch(loginUser(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionList);","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\SelectedAction.jsx",["160","161"],"import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Slider, Panel, FlexboxGrid, Content, Tag, TagGroup, ButtonGroup, Button, Modal, Alert, InputPicker, InputNumber, Divider, Progress } from 'rsuite';\r\nimport { gameServer } from '../../config';\r\nimport { characterUpdated, getMyCharacter } from '../../redux/entities/characters';\r\nimport { actionDeleted } from '../../redux/entities/playerActions';\r\nimport socket from '../../socket';\r\n/* To Whoever is reading this code. The whole \"action\" branch turned into a real mess, for which I am sorry. If you are looking into a better way of implementation, try the OtherCharacters page for lists. I hate forms.... */\r\nclass SelectedAction extends Component {\r\n\tstate = { \r\n\t\tedit: null, // used to open edit action popup\r\n\t\tresEdit: null,\t// used to open action result popup\r\n\t\tloading: false, //used for loading button \r\n\t\teffort: 1,\r\n\t\tasset1: '',\r\n\t\tasset2: '',\r\n\t\tasset3: '',\r\n\t\tid: '',\r\n\t\tdescription: '',\r\n\t\tintent: '',\t\r\n\t\tresult: this.props.action.result,\r\n\t\tdieResult: this.props.action.dieResult,\r\n\t\tstatus: ''\t\t\t\r\n\t }\r\n\r\n\t componentDidUpdate = (prevProps) => {\r\n\t\tif (this.props.action !== prevProps.action) {\r\n\t\t\tthis.setState({ \t\r\n\t\t\t\tresult: this.props.action.result,\r\n\t\t\t\tdieResult: this.props.action.dieResult, })\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\trender() { \r\n\t\tconst action = this.props.action;\r\n\t\treturn ( \r\n\t\t\t<Content style={{overflow: 'auto', height: 'calc(100vh - 100px)'}} >\r\n\t\t\t<FlexboxGrid >\r\n\t\t\t\t<FlexboxGrid.Item colspan={2} >\r\n\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t<FlexboxGrid.Item colspan={16} >\r\n\t\t\t\t\t<Panel shaded style={{padding: \"0px\", textAlign: \"left\", backgroundColor: \"#15181e\", whiteSpace: 'pre-line'}}>\r\n\t\t\t\t\t\t<p style={{ fontSize: '300', color: '#97969B', fontWeight: 'lighter',\twhiteSpace: 'nowrap',}}>\r\n\t\t\t\t\t\t\tCreated by: {action.creator.characterName}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={slimText}>\r\n\t\t\t\t\t\t\tDescription\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{action.description}\t\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={slimText}>\r\n\t\t\t\t\t\t\tIntent\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{action.intent}\t\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={slimText}>\r\n\t\t\t\t\t\t\tEffort\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p style={{ textAlign: 'center', fontWeight: 'bolder', fontSize: 20 }} >{action.effort}</p>\r\n\t\t\t\t\t\t<Progress.Line percent={action.effort * 33 + 1} showInfo={false}>  </Progress.Line>\r\n\t\t\t\t\t\t<Divider>Assets/Traits</Divider>\r\n\t\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t\t\t{this.renderAsset(action.asset1)}\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t\t{this.renderAsset(action.asset2)}\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t\t<FlexboxGrid.Item colspan={8}>\r\n\t\t\t\t\t\t\t{this.renderAsset(action.asset3)}\r\n\t\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</Panel>\r\n\t\t\t\t\t{(action.status.published || this.props.user.roles.some(el=> el === 'Control')) && \r\n\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t<Divider>Action Result</Divider>\r\n\t\t\t\t\t\t<Panel style={{textAlign: \"left\", backgroundColor: \"#61342e\",  whiteSpace: 'pre-line'}}>\r\n\t\t\t\t\t\t\t<p style={slimText}>Result</p>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{action.result}\t\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</Panel>\t\t\t\t\t\t\r\n\t\t\t\t\t</React.Fragment>}\r\n\r\n\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t<FlexboxGrid.Item colspan={1} />\r\n\t\t\t\t<FlexboxGrid.Item colspan={5}>\r\n\t\t\t\t\t<Panel style={{backgroundColor: '#15181e', border: '2px solid rgba(255, 255, 255, 0.12)', textAlign: 'center'}}>\r\n\t\t\t\t\t\t<TagGroup >Status:\r\n\t\t\t\t\t\t\t{action.status.draft && <Tag color='red'>Draft</Tag>}\r\n\t\t\t\t\t\t\t{!action.status.draft && !action.status.ready && !action.status.published && <Tag color='blue'>Awaiting Resolution</Tag>}\r\n\t\t\t\t\t\t\t{action.status.ready && <Tag color='violet'>Ready for Publishing</Tag>}\r\n\t\t\t\t\t\t\t{action.status.published && <Tag color='green'>Published</Tag>}\r\n\t\t\t\t\t\t</TagGroup>\r\n\t\t\t\t\t\t\t<ButtonGroup style={{marginTop: '5px' }} >\r\n\t\t\t\t\t\t\t\t<Button appearance={\"ghost\"} disabled={!action.status.draft} onClick={() => this.openEdit()} >Edit</Button>\r\n\t\t\t\t\t\t\t\t<Button color='red' appearance={\"ghost\"} disabled={!action.status.draft} onClick={() => this.deleteAction()}>Delete</Button>\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t</Panel>\r\n\t\t\t\t\t{this.props.user.roles.some(el=> el === 'Control') && \r\n\t\t\t\t\t\t<Panel header={\"Control Panel\"} style={{backgroundColor: '#61342e', border: '2px solid rgba(255, 255, 255, 0.12)', textAlign: 'center'}}>\r\n\t\t\t\t\t\t\t<ButtonGroup style={{marginTop: '5px', }} >\r\n\t\t\t\t\t\t\t\t<Button appearance={\"ghost\"} onClick={() => this.setState({ resEdit: true })}>Edit Result</Button>\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t</Panel>}\r\n\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t</FlexboxGrid>\t\r\n\r\n\t\t\t<Modal overflow \r\n\t\t\tfull\r\n\t\t\tsize='lg'  \r\n\t\t\tshow={this.state.edit} \r\n\t\t\tonHide={() => this.closeEdit()}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>Edit an Action</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<FlexboxGrid> Description\r\n\t\t\t\t\t\t<textarea rows='6' value={this.state.description} style={textStyle} onChange={(event)=> this.setState({description: event.target.value})}></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<FlexboxGrid> What you would like to happen\r\n\t\t\t\t\t\t<textarea rows='6' value={this.state.intent} style={textStyle} onChange={(event)=> this.setState({intent: event.target.value})} ></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} align=\"middle\" colspan={6}>Effort\r\n\t\t\t\t\t\t\t<Slider graduated\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={this.props.myCharacter.effort + this.props.action.effort}\r\n\t\t\t\t\t\t\tdefaultValue={this.state.effort}\r\n\t\t\t\t\t\t\tprogress\r\n\t\t\t\t\t\t\tvalue={this.state.effort}\r\n\t\t\t\t\t\t\tonChange={(event)=> this.setState({effort: event})}>\r\n\t\t\t\t\t\t\t</Slider>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '25px', paddingLeft: '10px', textAlign: 'left'}} colspan={2}>\r\n\t\t\t\t\t\t\t<InputNumber value={this.state.effort} max={this.props.myCharacter.effort + this.props.action.effort} min={0} onChange={(event)=> this.setState({effort: event})}></InputNumber>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item colspan={4}>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '5px', paddingLeft: '10px', textAlign: 'left'}}  colspan={10}> Assets/Traits\r\n\t\t\t\t\t\t\t<InputPicker defaultValue={this.state.asset1} placeholder=\"Slot 1\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset1: event})}/>\r\n\t\t\t\t\t\t\t<InputPicker defaultValue={this.state.asset2} placeholder=\"Slot 2\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset2: event})}/>\r\n\t\t\t\t\t\t\t<InputPicker defaultValue={this.state.asset3} placeholder=\"Slot 3\" labelKey='name' valueKey='name' data={this.props.assets} style={{ width: '100%' }} onChange={(event)=> this.setState({asset3: event})}/>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n          <Button loading={this.state.loading} onClick={() => this.handleSubmit()} disabled={this.state.effort === 0} appearance=\"primary\">\r\n            Submit\r\n          </Button>\r\n          <Button onClick={() => this.closeEdit()} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n\t\t\t</Modal>\r\n\r\n\t\t\t<Modal overflow\r\n\t\t\tfull\r\n\t\t\tsize='lg'  \r\n\t\t\tshow={this.state.resEdit} \r\n\t\t\tonHide={() => this.closeResult()}>\r\n\t\t\t\t<Modal.Header>\r\n\t\t\t\t\t<Modal.Title>Edit Action Result</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\r\n\t\t\t\t<p style={{ fontSize: '300', color: '#97969B', fontWeight: 'lighter',\twhiteSpace: 'nowrap',}}>\r\n\t\t\t\t\t\tCreated by: {action.creator.characterName}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p style={{  fontSize: '0.966em', color: '#97969B', \tfontWeight: '300',}}>\r\n\t\t\t\t\t\tDescription\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t{action.description}\t\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p style={{ fontSize: '0.966em', color: '#97969B', \tfontWeight: '300', }}>\r\n\t\t\t\t\t\tIntent\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t{action.intent}\t\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p style={{ fontSize: '0.966em', color: '#97969B', \tfontWeight: '300',}}>\r\n\t\t\t\t\t\tEffort\r\n\t\t\t\t</p>\r\n\t\t\t\t<p style={{ fontWeight: 'bolder', fontSize: 20 }} >{action.effort}</p>\r\n\t\t\t\t<Divider></Divider>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<FlexboxGrid> Result:\r\n\t\t\t\t\t\t<textarea rows='6' value={this.state.result} style={textStyle} onChange={(event)=> this.setState({result: event.target.value})}></textarea>\t\t\t\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t<br></br>\r\n\t\t\t\t\t<FlexboxGrid>\r\n\t\t\t\t\t\t<FlexboxGrid.Item colspan={6}>\r\n\t\t\t\t\t\t\t<b>Die Result</b>\r\n\t\t\t\t\t\t\t<textarea value={this.state.dieResult} style={textStyle} onChange={(event)=> this.setState({dieResult: event.target.value})}></textarea>\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={2}/>\r\n\t\t\t\t\t<FlexboxGrid.Item colspan={6}>\r\n\t\t\t\t\t\t<b>Status</b>\r\n\t\t\t\t\t\t<InputPicker labelKey='label' valueKey='value' data={pickerData} style={{ width: '100%' }} onChange={(event)=> this.setState({status: event})}/>\t\t\t\t\r\n\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t\t<FlexboxGrid.Item style={{paddingTop: '5px', paddingLeft: '10px', textAlign: 'left'}}  colspan={10}>\r\n\t\t\t\t\t\t</FlexboxGrid.Item>\r\n\t\t\t\t\t</FlexboxGrid>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button loading={this.state.loading} onClick={() => this.handleSubmit()} appearance=\"primary\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button onClick={() => this.closeResult()} appearance=\"subtle\">\r\n\t\t\t\t\t\tCancel\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</Content>\t\t\r\n\t\t );\r\n\t}\r\n\r\n\topenEdit = () => {\r\n\t\tconst action = this.props.action;\r\n\r\n\t\tthis.setState({ \r\n\t\t\tdescription: action.description, \r\n\t\t\tintent: action.intent, \r\n\t\t\teffort: action.effort, \r\n\t\t\tid: action._id, \r\n\t\t\tasset1: action.asset1,\r\n\t\t\tasset2: action.asset2,\r\n\t\t\tasset3: action.asset3,\r\n\t\t\tedit: true })\r\n\t}\r\n\r\n\thandleSubmit = async () => {\r\n\t\tthis.setState({loading: true}) \r\n\t\tconst action = {\r\n\t\t\teffort: this.state.effort,\r\n\t\t\tasset1: this.state.asset1,\r\n\t\t\tasset2: this.state.asset2,\r\n\t\t\tasset3: this.state.asset3,\r\n\t\t\tdescription: this.state.description,\r\n\t\t\tintent: this.state.intent,\r\n\t\t\tresult: this.state.result,\r\n\t\t\tdieResult: this.state.dieResult,\r\n\t\t\tstatus: this.state.status,\r\n\t\t\tid: this.props.action._id,\r\n\t\t\tplayerBoolean: this.state.edit\t\r\n\t\t}\r\n\t\t// console.log(action)\r\n\t\t// 1) make a new action\r\n\t\ttry{\r\n\t\t\tsocket.emit('updateActionRequest', action); // new Socket event\r\n\t\t\tthis.setState({asset1: '', asset2: '', asset3: '', effort: 0, description: '', intent: '', id: '', result: '', dieResult: 0, status: ''});\t\r\n\t\t\tthis.props.handleSelect(null)\r\n\t\t\tthis.closeEdit();\r\n\t\t\tthis.closeResult();\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tAlert.error(`Error: ${err.response.data}`, 6000)\r\n\t\t}\r\n\t\tthis.setState({loading: false});\r\n\t}\r\n\r\n\trenderAsset = (asset) => {\r\n\t\tif (asset) {\r\n\t\t\treturn (\r\n\t\t\t\t\t<Panel style={{backgroundColor: \"#272b34\"}} shaded header={asset} bordered ></Panel>\t\r\n\t\t\t)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t\t<Panel style={{backgroundColor: \"#0e1013\"}} shaded header='Empty Slot' bordered ></Panel>\t\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tcloseEdit = () => { \r\n\t\tthis.setState({edit: false}) \r\n\t};\r\n\r\n\tcloseResult = () => { \r\n\t\tthis.setState({resEdit: false}) \r\n\t};\r\n\r\n\tdeleteAction = async () => {\r\n\t\t//let {data} = await axios.delete(`${gameServer}api/actions/${this.props.action._id}`);\r\n\t\tsocket.emit('deleteActionRequest', {id: this.props.action._id}); // new Socket event\r\n\t\t\r\n\t\t/*const modifiedChar = {...this.props.myCharacter};\r\n\t\tmodifiedChar.effort += this.state.effort;\r\n\t\tthis.props.updateCharacter(modifiedChar);\r\n\t\t*/\r\n\t\tthis.props.handleSelect(null);\r\n\t}\r\n}\r\n\r\nconst slimText = {\r\n  fontSize: '0.966em',\r\n  color: '#97969B',\r\n\tfontWeight: '300',\r\n\twhiteSpace: 'nowrap',\r\n\ttextAlign: \"center\"\r\n};\r\n\r\nconst pickerData = [\r\n\t{\r\n\t\tlabel: 'Draft',\r\n\t\tvalue: 'draft'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Awaiting Resolution',\r\n\t\tvalue: 'awaiting'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Ready for Publishing',\r\n\t\tvalue: 'ready'\r\n\t},\r\n\t{\r\n\t\tlabel: 'Published',\r\n\t\tvalue: 'published'\r\n\t}\r\n]\r\n \r\nconst textStyle = {\r\n\tbackgroundColor: '#1a1d24', \r\n\tborder: '1.5px solid #3c3f43', \r\n\tborderRadius: '5px', \r\n\twidth: '100%',\r\n\tpadding: '5px',\r\n\toverflow: 'auto', \r\n\tscrollbarWidth: 'none',\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tuser: state.auth.user,\r\n\tgamestate: state.gamestate,\r\n\tactions: state.actions.list,\r\n  myCharacter: state.auth.user ? getMyCharacter(state): undefined\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\t// handleLogin: (data) => dispatch(loginUser(data))\r\n\tdeleteAction: (data) => dispatch(actionDeleted(data)),\r\n\tupdateCharacter: (data) => dispatch(characterUpdated(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedAction);","C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Actions\\SelectedProject.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\Navigation\\loading.jsx",["162","163"],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\ModifyCharacter.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\AddAsset.jsx",[],"C:\\Users\\Scott.000\\Desktop\\Programming\\CANDI-app\\reactapp\\src\\components\\OtherCharacters\\ModifyMemory.jsx",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":4,"column":10,"nodeType":"170","messageId":"171","endLine":4,"endColumn":31},{"ruleId":"168","severity":1,"message":"172","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":360,"column":9,"nodeType":"170","messageId":"171","endLine":360,"endColumn":17},{"ruleId":"168","severity":1,"message":"174","line":15,"column":9,"nodeType":"170","messageId":"171","endLine":15,"endColumn":17},{"ruleId":"168","severity":1,"message":"175","line":1,"column":17,"nodeType":"170","messageId":"171","endLine":1,"endColumn":26},{"ruleId":"168","severity":1,"message":"176","line":15,"column":12,"nodeType":"170","messageId":"171","endLine":15,"endColumn":18},{"ruleId":"168","severity":1,"message":"177","line":15,"column":20,"nodeType":"170","messageId":"171","endLine":15,"endColumn":29},{"ruleId":"168","severity":1,"message":"178","line":20,"column":3,"nodeType":"170","messageId":"171","endLine":20,"endColumn":8},{"ruleId":"168","severity":1,"message":"179","line":21,"column":3,"nodeType":"170","messageId":"171","endLine":21,"endColumn":9},{"ruleId":"168","severity":1,"message":"180","line":22,"column":3,"nodeType":"170","messageId":"171","endLine":22,"endColumn":15},{"ruleId":"168","severity":1,"message":"181","line":1,"column":8,"nodeType":"170","messageId":"171","endLine":1,"endColumn":13},{"ruleId":"168","severity":1,"message":"182","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":20},{"ruleId":"168","severity":1,"message":"183","line":5,"column":27,"nodeType":"170","messageId":"171","endLine":5,"endColumn":39},{"ruleId":"168","severity":1,"message":"181","line":1,"column":8,"nodeType":"170","messageId":"171","endLine":1,"endColumn":13},{"ruleId":"168","severity":1,"message":"182","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":20},{"ruleId":"168","severity":1,"message":"184","line":257,"column":7,"nodeType":"170","messageId":"171","endLine":257,"endColumn":11},{"ruleId":"168","severity":1,"message":"185","line":258,"column":7,"nodeType":"170","messageId":"171","endLine":258,"endColumn":12},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'playerActionsReceived' is defined but never used.","Identifier","unusedVar","'socket' is defined but never used.","'filtered' is assigned a value but never used.","'interval' is assigned a value but never used.","'useEffect' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'Modal' is defined but never used.","'Drawer' is defined but never used.","'SelectPicker' is defined but never used.","'axios' is defined but never used.","'gameServer' is defined but never used.","'getMyActions' is defined but never used.","'rand' is assigned a value but never used.","'rand1' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]